import{_ as r,r as a,o as c,c as p,a as e,b as s,d as t,f as i,e as n}from"./app.deebd827.js";const d={},h=e("h1",{id:"create-a-plugin",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-a-plugin","aria-hidden":"true"},"#"),s(" Create a Plugin")],-1),u=e("p",null,[s("A plugin is a Git repo with some executable scripts to support versioning a language / tool. These scripts are run by asdf using specific commands to support features such as "),e("code",null,"asdf list-all <name>"),s(", "),e("code",null,"asdf install <name> <version>"),s(" etc.")],-1),g=e("h2",{id:"quickstart",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#quickstart","aria-hidden":"true"},"#"),s(" Quickstart")],-1),m=e("p",null,"There are two options to get started with creating your own plugin:",-1),f={href:"https://github.com/asdf-vm/asdf-plugin-template",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/asdf-vm/asdf-plugin-template/generate",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"asdf-<tool_name>",-1),_=e("code",null,"setup.bash",-1),v=e("li",null,[s("start your own repo called "),e("code",null,"asdf-<tool_name>"),s(" and implement the required scripts as listed in the documentation below.")],-1),y=e("h3",{id:"golden-rules-for-plugin-scripts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#golden-rules-for-plugin-scripts","aria-hidden":"true"},"#"),s(" Golden Rules for Plugin Scripts")],-1),x=e("li",null,[s("scripts should "),e("strong",null,"NOT"),s(" call other "),e("code",null,"asdf"),s(" commands")],-1),A=e("li",null,"keep your dependency list of Shell tools/commands small",-1),D=e("code",null,"sort -V",-1),S={href:"https://github.com/asdf-vm/asdf/blob/master/test/banned_commands.bats",target:"_blank",rel:"noopener noreferrer"},T=e("h2",{id:"scripts-overview",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#scripts-overview","aria-hidden":"true"},"#"),s(" Scripts Overview")],-1),E=e("p",null,"The full list of scripts callable from asdf.",-1),L=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Script"),e("th",{style:{"text-align":"left"}},"Description")])],-1),I={style:{"text-align":"left"}},w=e("a",{href:"#bin-list-all"},"bin/list-all",-1),k=e("td",{style:{"text-align":"left"}},"List all installable versions",-1),N={style:{"text-align":"left"}},q=e("a",{href:"#bin-download"},"bin/download",-1),P=e("td",{style:{"text-align":"left"}},"Download source code or binary for the specified version",-1),O={style:{"text-align":"left"}},B=e("a",{href:"#bin-install"},"bin/install",-1),C=e("td",{style:{"text-align":"left"}},"Installs the specified version",-1),$={style:{"text-align":"left"}},R=e("a",{href:"#bin-latest-stable"},"bin/latest-stable",-1),V=e("td",{style:{"text-align":"left"}},"List the latest stable version of the specified tool",-1),H=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-help.overview"},"bin/help.overview")]),e("td",{style:{"text-align":"left"}},"Output a general description about the plugin & tool")],-1),Y=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-help.deps"},"bin/help.deps")]),e("td",{style:{"text-align":"left"}},"Output a list of dependencies per Operating System")],-1),G=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-help.config"},"bin/help.config")]),e("td",{style:{"text-align":"left"}},"Output plugin or tool configuration information")],-1),U=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-help.links"},"bin/help.links")]),e("td",{style:{"text-align":"left"}},"Output a list of links for the plugin or tool")],-1),j=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-list-bin-paths"},"bin/list-bin-paths")]),e("td",{style:{"text-align":"left"}},"List relative paths to directories with binaries to create shims")],-1),W=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-exec-env"},"bin/exec-env")]),e("td",{style:{"text-align":"left"}},"Prepare the environment for running the binaries")],-1),z=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-exec-path"},"bin/exec-path")]),e("td",{style:{"text-align":"left"}},"Output the executable path for a version of a tool")],-1),M=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-uninstall"},"bin/uninstall")]),e("td",{style:{"text-align":"left"}},"Uninstall a specific version of a tool")],-1),K=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-list-legacy-filenames"},"bin/list-legacy-filenames")]),e("td",{style:{"text-align":"left"}},[s("Output filenames of legacy version files: "),e("code",null,".ruby-version")])],-1),J=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-parse-legacy-file"},"bin/parse-legacy-file")]),e("td",{style:{"text-align":"left"}},"Custom parser for legacy version files")],-1),Q=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-post-plugin-add"},"bin/post-plugin-add")]),e("td",{style:{"text-align":"left"}},"Hook to execute after a plugin has been added")],-1),X=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-post-plugin-update"},"bin/post-plugin-update")]),e("td",{style:{"text-align":"left"}},"Hook to execute after a plugin has been updated")],-1),Z=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("a",{href:"#bin-pre-plugin-remove"},"bin/pre-plugin-remove")]),e("td",{style:{"text-align":"left"}},"Hook to execute before a plugin is removed")],-1),ee=n('<p>To see which commands invoke which scripts, see the detailed documentation for each script.</p><h2 id="environment-variables-overview" tabindex="-1"><a class="header-anchor" href="#environment-variables-overview" aria-hidden="true">#</a> Environment Variables Overview</h2><p>The full list of Environment Variables used throughout all scripts.</p><table><thead><tr><th style="text-align:left;">Environment Variables</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ASDF_INSTALL_TYPE</code></td><td style="text-align:left;"><code>version</code> or <code>ref</code></td></tr><tr><td style="text-align:left;"><code>ASDF_INSTALL_VERSION</code></td><td style="text-align:left;">full version number or Git Ref depending on <code>ASDF_INSTALL_TYPE</code></td></tr><tr><td style="text-align:left;"><code>ASDF_INSTALL_PATH</code></td><td style="text-align:left;">the path to where the tool <em>should</em>, or <em>has been</em> installed</td></tr><tr><td style="text-align:left;"><code>ASDF_CONCURRENCY</code></td><td style="text-align:left;">the number of cores to use when compiling the source code. Useful for setting <code>make -j</code></td></tr><tr><td style="text-align:left;"><code>ASDF_DOWNLOAD_PATH</code></td><td style="text-align:left;">the path to where the source code or binary was downloaded to by <code>bin/download</code></td></tr><tr><td style="text-align:left;"><code>ASDF_PLUGIN_PATH</code></td><td style="text-align:left;">the path the plugin was installed</td></tr><tr><td style="text-align:left;"><code>ASDF_PLUGIN_SOURCE_URL</code></td><td style="text-align:left;">the source URL of the plugin</td></tr><tr><td style="text-align:left;"><code>ASDF_PLUGIN_PREV_REF</code></td><td style="text-align:left;">prevous <code>git-ref</code> of the plugin repo</td></tr><tr><td style="text-align:left;"><code>ASDF_PLUGIN_POST_REF</code></td><td style="text-align:left;">updated <code>git-ref</code> of the plugin repo</td></tr><tr><td style="text-align:left;"><code>ASDF_CMD_FILE</code></td><td style="text-align:left;">resolves to the full path of the file being sourced</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p><strong>Not all environment variables are available in all scripts.</strong> Check the documentation for each script below to see which env vars are available to it.</p></div><h2 id="required-scripts" tabindex="-1"><a class="header-anchor" href="#required-scripts" aria-hidden="true">#</a> Required Scripts</h2>',6),se={id:"bin-list-all",tabindex:"-1"},te=e("a",{class:"header-anchor",href:"#bin-list-all","aria-hidden":"true"},"#",-1),le=e("code",null,"bin/list-all",-1),ne=n(`<p><strong>Description</strong></p><p>List all installable versions.</p><p><strong>Output Format</strong></p><p>Must print a string with a <strong>space-separated</strong> list of versions. For example:</p><div class="language-text" data-ext="text"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">1.0.1 1.0.2 1.3.0 1.4</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre></div><p>Newest version should be last.</p><p>asdf core will print each version on its own line, potentially pushing some versions offscreen.</p><p><strong>Sorting</strong></p><p>If versions are being pulled from releases page on a website it&#39;s recommended to leave the versions in the provided order as they are often already in the correct order. If they are in reverse order piping them through <code>tac</code> should suffice.</p><p>If sorting is unavoidable, <code>sort -V</code> is not portable, so we suggest either:</p>`,10),oe={href:"https://github.com/asdf-vm/asdf-plugin-template/blob/main/template/lib/utils.bash",target:"_blank",rel:"noopener noreferrer"},ae=e("code",null,"v2.18.0",-1),ie={href:"https://github.com/vic/asdf-idris/blob/master/bin/list-all#L6",target:"_blank",rel:"noopener noreferrer"},re=e("code",null,"sed",-1),ce=e("code",null,"sort",-1),pe=e("code",null,"awk",-1),de=n('<p><strong>Environment Variables available to script</strong></p><p>No environment variables are provided to this script.</p><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf list all &lt;name&gt; [version]</code></li><li><code>asdf list all nodejs</code>: lists all versions as returned by this script, one on each line.</li><li><code>asdf list all nodejs 18</code>: lists all versions as returned by this script, one on each line, with a filter matching any version beginning with <code>18</code> applied.</li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">${plugin_path}</span><span style="color:#E6DB74;">/bin/list-all&quot;</span></span>\n<span class="line"></span></code></pre></div><hr>',8),he={id:"bin-download",tabindex:"-1"},ue=e("a",{class:"header-anchor",href:"#bin-download","aria-hidden":"true"},"#",-1),ge=e("code",null,"bin/download",-1),me=n('<p><strong>Description</strong></p><p>Download the source code or binary for a specific version of a tool to a specified location.</p><p><strong>Implementation Details</strong></p><ul><li>The script must download the source or binary to the directory specified by <code>ASDF_DOWNLOAD_PATH</code>.</li><li>Only the decompressed source code or binary should be placed in the <code>ASDF_DOWNLOAD_PATH</code> directory.</li><li>On failure, no files should be placed in <code>ASDF_DOWNLOAD_PATH</code>.</li><li>Success should exit with <code>0</code>.</li><li>Failure should exit with a non-zero status.</li></ul><p><strong>Legacy Plugins</strong></p><p>Though this script is marked as <em>required</em> for all plugins, it is <em>optional</em> for &quot;legacy&quot; plugins which predate its introduction.</p><p>If this script is absent, asdf will assume that the <code>bin/install</code> script is present and will download <strong>and</strong> install the version.</p><p>All plugins must include this script as support for legacy plugins will eventually be removed.</p><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li><li><code>ASDF_DOWNLOAD_PATH</code>: The path to where the source code or binary was downloaded to.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf install &lt;tool&gt; [version]</code></li><li><code>asdf install &lt;tool&gt; latest[:version]</code></li><li><code>asdf install nodejs 18.0.0</code>: downloads the source code or binary for Node.js version <code>18.0.0</code> and places it in the <code>ASDF_DOWNLOAD_PATH</code> directory. Then runs the <code>bin/install</code> script.</li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/download</span></span>\n<span class="line"></span></code></pre></div><hr>',16),fe={id:"bin-install",tabindex:"-1"},be=e("a",{class:"header-anchor",href:"#bin-install","aria-hidden":"true"},"#",-1),Fe=e("code",null,"bin/install",-1),_e=n('<p><strong>Description</strong></p><p>Install a specific version of a tool to a specified location.</p><p><strong>Implementation Details</strong></p><ul><li>The script should install the specified version in the path <code>ASDF_INSTALL_PATH</code>.</li><li>Shims will be created by default for any files in <code>$ASDF_INSTALL_PATH/bin</code>. This behaviour can be customised with the optional <a href="#binlist-bin-paths">bin/list-bin-paths</a> script.</li><li>Success should exit with <code>0</code>.</li><li>Failure should exit with a non-zero status.</li><li>To avoid TOCTOU (Time-of-Check-to-Time-of-Use) issues, ensure the script only places files in <code>ASDF_INSTALL_PATH</code> once the build and installation of the tool is deemed a success.</li></ul><p><strong>Legacy Plugins</strong></p><p>If the <code>bin/download</code> script is absent, this script should download <strong>and</strong> install the specified version.</p><p>For compatibility with versions of the asdf core earlier than <code>0.7._</code> and newer than <code>0.8._</code>, check for the presence of the <code>ASDF_DOWNLOAD_PATH</code> environment variable. If set, assume the <code>bin/download</code> script already downloaded the version, else download the source code in the <code>bin/install</code> script.</p><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li><li><code>ASDF_CONCURRENCY</code>: The number of cores to use when compiling source code. Useful for setting flags like <code>make -j</code>.</li><li><code>ASDF_DOWNLOAD_PATH</code>: The path where the source code or binary was downloaded to.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf install</code></li><li><code>asdf install &lt;tool&gt;</code></li><li><code>asdf install &lt;tool&gt; [version]</code></li><li><code>asdf install &lt;tool&gt; latest[:version]</code></li><li><code>asdf install nodejs 18.0.0</code>: installs Node.js version <code>18.0.0</code> in the <code>ASDF_INSTALL_PATH</code> directory.</li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/install</span></span>\n<span class="line"></span></code></pre></div><h2 id="optional-scripts" tabindex="-1"><a class="header-anchor" href="#optional-scripts" aria-hidden="true">#</a> Optional Scripts</h2>',15),ve={id:"bin-latest-stable",tabindex:"-1"},ye=e("a",{class:"header-anchor",href:"#bin-latest-stable","aria-hidden":"true"},"#",-1),xe=e("code",null,"bin/latest-stable",-1),Ae=e("p",null,[e("strong",null,"Description")],-1),De=e("p",null,[s("Determine the latest stable version of a tool. If absent, the asdf core will "),e("code",null,"tail"),s(" the "),e("code",null,"bin/list-all"),s(" output which may be undesirable.")],-1),Se=e("p",null,[e("strong",null,"Implementation Details")],-1),Te=e("li",null,"The script should print the latest stable version of the tool to stdout.",-1),Ee=e("li",null,"Non-stable or release candidate versions should be omitted.",-1),Le=e("code",null,"asdf list all ruby",-1),Ie={href:"https://github.com/asdf-vm/asdf-ruby",target:"_blank",rel:"noopener noreferrer"},we=e("code",null,"jruby",-1),ke=e("code",null,"rbx",-1),Ne=e("code",null,"truffleruby",-1),qe=n(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">&gt; asdf latest ruby</span></span>
<span class="line"><span style="color:#F8F8F2;">3.2.2</span></span>
<span class="line"><span style="color:#F8F8F2;">&gt; asdf latest ruby 2</span></span>
<span class="line"><span style="color:#F8F8F2;">2.7.8</span></span>
<span class="line"><span style="color:#F8F8F2;">&gt; asdf latest ruby truffleruby</span></span>
<span class="line"><span style="color:#F8F8F2;">truffleruby+graalvm-22.3.1</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Pe=e("li",null,[s("Success should exit with "),e("code",null,"0"),s(".")],-1),Oe=e("li",null,"Failure should exit with a non-zero status.",-1),Be=n(`<p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf global &lt;tool&gt; latest</code>: set the global version of a tool to the latest stable version for that tool.</li><li><code>asdf local &lt;name&gt; latest</code>: set the local version of a tool to the latest stable version for that tool.</li><li><code>asdf install &lt;tool&gt; latest</code>: installs the latest version of a tool.</li><li><code>asdf latest &lt;tool&gt; [&lt;version&gt;]</code>: outputs the latest version of a tool based on the optional filter.</li><li><code>asdf latest --all</code>: outputs the latest version of all tools managed by asdf and whether they are installed.</li></ul><p><strong>Call signature from asdf core</strong></p><p>The script should accept a single argument, the filter query.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/latest-stable </span><span style="color:#E6DB74;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/latest-stable </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$query</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-help-overview" tabindex="-1"><a class="header-anchor" href="#bin-help-overview" aria-hidden="true">#</a> <code>bin/help.overview</code></h3><p><strong>Description</strong></p><p>Output a general description about the plugin and the tool being managed.</p><p><strong>Implementation Details</strong></p><ul><li>This script is required for any help output to be displayed for the plugin.</li><li>No heading should be printed as asdf core will print headings.</li><li>Output may be free-form text but ideally only one short paragraph.</li><li>Must not output any information that is already covered in the core asdf-vm documentation.</li><li>Should be tailored to the Operating System and version of the tool being installed (using optionally set Environment Variables <code>ASDF_INSTALL_VERSION</code> and <code>ASDF_INSTALL_TYPE</code>).</li><li>Success should exit with <code>0</code>.</li><li>Failure should exit with a non-zero status.</li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf help &lt;name&gt; [&lt;version&gt;]</code>: Output documentation for plugin and tool</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/help.overview</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-help-deps" tabindex="-1"><a class="header-anchor" href="#bin-help-deps" aria-hidden="true">#</a> <code>bin/help.deps</code></h3><p><strong>Description</strong></p><p>Output the list of dependencies tailored to the operating system. One dependency per line.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">git</span></span>
<span class="line"><span style="color:#F8F8F2;">curl</span></span>
<span class="line"><span style="color:#F8F8F2;">sed</span></span>
<span class="line"></span></code></pre></div><p><strong>Implementation Details</strong></p><ul><li>This script requires <code>bin/help.overview</code> for its output to be considered.</li><li>Should be tailored to the Operating System and version of the tool being installed (using optionally set Environment Variables <code>ASDF_INSTALL_VERSION</code> and <code>ASDF_INSTALL_TYPE</code>).</li><li>Success should exit with <code>0</code>.</li><li>Failure should exit with a non-zero status.</li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf help &lt;name&gt; [&lt;version&gt;]</code>: Output documentation for plugin and tool</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/help.deps</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-help-config" tabindex="-1"><a class="header-anchor" href="#bin-help-config" aria-hidden="true">#</a> <code>bin/help.config</code></h3><p><strong>Description</strong></p><p>Output any required or optional configuration for the plugin and tool. For example, describe any environment variables or other flags needed to install or compile the tool.</p><p><strong>Implementation Details</strong></p><ul><li>This script requires <code>bin/help.overview</code> for its output to be considered.</li><li>Output can be free-form text.</li><li>Should be tailored to the Operating System and version of the tool being installed (using optionally set Environment Variables <code>ASDF_INSTALL_VERSION</code> and <code>ASDF_INSTALL_TYPE</code>).</li><li>Success should exit with <code>0</code>.</li><li>Failure should exit with a non-zero status.</li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf help &lt;name&gt; [&lt;version&gt;]</code>: Output documentation for plugin and tool</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/help.config</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-help-links" tabindex="-1"><a class="header-anchor" href="#bin-help-links" aria-hidden="true">#</a> <code>bin/help.links</code></h3><p><strong>Description</strong></p><p>Output a list of links relevant to the plugin and tool. One link per line.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">Git Repository:	https://github.com/vlang/v</span></span>
<span class="line"><span style="color:#F8F8F2;">Documentation:	https://vlang.io</span></span>
<span class="line"></span></code></pre></div><p><strong>Implementation Details</strong></p><ul><li>This script requires <code>bin/help.overview</code> for its output to be considered.</li><li>One link per line.</li><li>Format must be either: <ul><li><code>&lt;title&gt;: &lt;link&gt;</code></li><li>or just <code>&lt;link&gt;</code></li></ul></li><li>Should be tailored to the Operating System and version of the tool being installed (using optionally set Environment Variables <code>ASDF_INSTALL_VERSION</code> and <code>ASDF_INSTALL_TYPE</code>).</li><li>Success should exit with <code>0</code>.</li><li>Failure should exit with a non-zero status.</li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf help &lt;name&gt; [&lt;version&gt;]</code>: Output documentation for plugin and tool</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">/bin/help.links</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-list-bin-paths" tabindex="-1"><a class="header-anchor" href="#bin-list-bin-paths" aria-hidden="true">#</a> <code>bin/list-bin-paths</code></h3><p><strong>Description</strong></p><p>List directories containing executables for the specified version of the tool.</p><p><strong>Implementation Details</strong></p><ul><li>If this script is not present, asdf will look for binaries in the <code>&quot;\${ASDF_INSTALL_PATH}&quot;/bin</code> directory &amp; create shims for those.</li><li>Output a space-separated list of paths containing executables.</li><li>Paths must be relative to <code>ASDF_INSTALL_PATH</code>. Example output would be:</li></ul><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">bin tools veggies</span></span>
<span class="line"></span></code></pre></div><p>This will instruct asdf to create shims for the files in:</p><ul><li><code>&quot;\${ASDF_INSTALL_PATH}&quot;/bin</code></li><li><code>&quot;\${ASDF_INSTALL_PATH}&quot;/tools</code></li><li><code>&quot;\${ASDF_INSTALL_PATH}&quot;/veggies</code></li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf install &lt;tool&gt; [version]</code>: initially create shims for binaries.</li><li><code>asdf reshim &lt;tool&gt; &lt;version&gt;</code>: recreate shims for binaries.</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/list-bin-paths&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-exec-env" tabindex="-1"><a class="header-anchor" href="#bin-exec-env" aria-hidden="true">#</a> <code>bin/exec-env</code></h3><p><strong>Description</strong></p><p>Prepare the environment before executing the shims for the binaries for the tool.</p><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf which &lt;command&gt;</code>: Display the path to an executable</li><li><code>asdf exec &lt;command&gt; [args...]</code>: Executes the command shim for current version</li><li><code>asdf env &lt;command&gt; [util]</code>: Runs util (default: <code>env</code>) inside the environment used for command shim execution.</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/exec-env&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-exec-path" tabindex="-1"><a class="header-anchor" href="#bin-exec-path" aria-hidden="true">#</a> <code>bin/exec-path</code></h3><p>Get the executable path for the specified version of the tool. Must print a string with the relative executable path. This allows the plugin to conditionally override the shim&#39;s specified executable path, otherwise return the default path specified by the shim.</p><p><strong>Description</strong></p><p>Get the executable path for the specified version of the tool.</p><p><strong>Implementation Details</strong></p><ul><li>Must print a string with the relative executable path.</li><li>Conditionally override the shim&#39;s specified executable path, otherwise return the default path specified by the shim.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">Usage:</span></span>
<span class="line"><span style="color:#F8F8F2;">  plugin/bin/exec-path </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">install-path</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">command</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">executable-path</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Example Call:</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.asdf/plugins/foo/bin/exec-path </span><span style="color:#E6DB74;">&quot;~/.asdf/installs/foo/1.0&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;foo&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;bin/foo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Output:</span></span>
<span class="line"><span style="color:#F8F8F2;">  bin/foox</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf which &lt;command&gt;</code>: Display the path to an executable</li><li><code>asdf exec &lt;command&gt; [args...]</code>: Executes the command shim for current version</li><li><code>asdf env &lt;command&gt; [util]</code>: Runs util (default: <code>env</code>) inside the environment used for command shim execution.</li></ul><p><strong>Call signature from asdf core</strong></p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/exec-path&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$install_path</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$cmd</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$relative_path</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-uninstall" tabindex="-1"><a class="header-anchor" href="#bin-uninstall" aria-hidden="true">#</a> <code>bin/uninstall</code></h3><p><strong>Description</strong></p><p>Uninstall the provided version of a tool.</p><p><strong>Output Format</strong></p><p>Output should be sent to <code>stdout</code> or <code>stderr</code> as appropriate for the user. No output is read by subsequent execution in the core.</p><p><strong>Environment Variables available to script</strong></p><p>No environment variables are provided to this script.</p><p><strong>Commands that invoke this script</strong></p><ul><li><code>asdf list all &lt;name&gt; &lt;version&gt;</code></li><li><code>asdf uninstall nodejs 18.15.0</code>: Uninstalls the version <code>18.15.0</code> of nodejs, removing all shims including those installed global with <code>npm i -g</code></li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/uninstall&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-list-legacy-filenames" tabindex="-1"><a class="header-anchor" href="#bin-list-legacy-filenames" aria-hidden="true">#</a> <code>bin/list-legacy-filenames</code></h3><p><strong>Description</strong></p><p>List legacy configuration filenames for determining the specified version of the tool.</p><p><strong>Implementation Details</strong></p><ul><li>Output a space-separated list of filenames.<div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">.ruby-version .rvmrc</span></span>
<span class="line"></span></code></pre></div></li><li>Only applies for users who have enabled the <code>legacy_version_file</code> option in their <code>&quot;\${HOME}&quot;/.asdfrc</code>.</li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_INSTALL_TYPE</code>: <code>version</code> or <code>ref</code></li><li><code>ASDF_INSTALL_VERSION</code>: <ul><li>Full version number if <code>ASDF_INSTALL_TYPE=version</code>.</li><li>Git ref (tag/commit/branch) if <code>ASDF_INSTALL_TYPE=ref</code>.</li></ul></li><li><code>ASDF_INSTALL_PATH</code>: The path to where the tool <em>has been</em>, or <em>should be</em> installed.</li></ul><p><strong>Commands that invoke this script</strong></p><p>Any command which reads a tool version.</p><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/list-legacy-filenames&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-parse-legacy-file" tabindex="-1"><a class="header-anchor" href="#bin-parse-legacy-file" aria-hidden="true">#</a> <code>bin/parse-legacy-file</code></h3><p><strong>Description</strong></p><p>Parse the legacy file found by asdf to determine the version of the tool. Useful to extract version numbers from files like JavaScript&#39;s <code>package.json</code> or Golangs <code>go.mod</code>.</p><p><strong>Implementation Details</strong></p><ul><li>If not present, asdf will simply <code>cat</code> the legacy file to determine the version.</li><li>Should be <strong>deterministic</strong> and always return the same exact version: <ul><li>when parsing the same legacy file.</li><li>regardless of what is installed on the machine or whether the legacy version is valid or complete. Some legacy file formats may not be suitable.</li></ul></li><li>Output a single line with the version:<div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">1.2.3</span></span>
<span class="line"></span></code></pre></div></li></ul><p><strong>Environment Variables available to script</strong></p><p>No environment variables specifically set before this script is called.</p><p><strong>Commands that invoke this script</strong></p><p>Any command which reads a tool version.</p><p><strong>Call signature from asdf core</strong></p><p>The script should accept a single argument, the path to the legacy file for reading its contents.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/parse-legacy-file&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$file_path</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-post-plugin-add" tabindex="-1"><a class="header-anchor" href="#bin-post-plugin-add" aria-hidden="true">#</a> <code>bin/post-plugin-add</code></h3><p><strong>Description</strong></p><p>Execute this callback script <strong>after</strong> the plugin has been <em>added</em> to asdf with <code>asdf plugin add &lt;tool&gt;</code>.</p><p>See also the related command hooks:</p><ul><li><code>pre_asdf_plugin_add</code></li><li><code>pre_asdf_plugin_add_\${plugin_name}</code></li><li><code>post_asdf_plugin_add</code></li><li><code>post_asdf_plugin_add_\${plugin_name}</code></li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_PLUGIN_PATH</code>: path where the plugin was installed.</li><li><code>ASDF_PLUGIN_SOURCE_URL</code>: URL of the plugin source. Can be a local directory path.</li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/post-plugin-add&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-post-plugin-update" tabindex="-1"><a class="header-anchor" href="#bin-post-plugin-update" aria-hidden="true">#</a> <code>bin/post-plugin-update</code></h3><p><strong>Description</strong></p><p>Execute this callback script <strong>after</strong> asdf has downloaded the <em>updated</em> plugin with <code>asdf plugin update &lt;tool&gt; [&lt;git-ref&gt;]</code>.</p><p>See also the related command hooks:</p><ul><li><code>pre_asdf_plugin_updated</code></li><li><code>pre_asdf_plugin_updated_\${plugin_name}</code></li><li><code>post_asdf_plugin_updated</code></li><li><code>post_asdf_plugin_updated_\${plugin_name}</code></li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_PLUGIN_PATH</code>: path where the plugin was installed.</li><li><code>ASDF_PLUGIN_PREV_REF</code>: the plugin&#39;s previous git-ref</li><li><code>ASDF_PLUGIN_POST_REF</code>: the plugin&#39;s updated git-ref</li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/post-plugin-update&quot;</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="bin-pre-plugin-remove" tabindex="-1"><a class="header-anchor" href="#bin-pre-plugin-remove" aria-hidden="true">#</a> <code>bin/pre-plugin-remove</code></h3><p><strong>Description</strong></p><p>Execute this callback script <strong>before</strong> asdf has removed the plugin with <code>asdf plugin remove &lt;tool&gt;</code>.</p><p>See also the related command hooks:</p><ul><li><code>pre_asdf_plugin_remove</code></li><li><code>pre_asdf_plugin_remove_\${plugin_name}</code></li><li><code>post_asdf_plugin_remove</code></li><li><code>post_asdf_plugin_remove_\${plugin_name}</code></li></ul><p><strong>Environment Variables available to script</strong></p><ul><li><code>ASDF_PLUGIN_PATH</code>: path where the plugin was installed.</li></ul><p><strong>Call signature from asdf core</strong></p><p>No parameters provided.</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">\${plugin_path}</span><span style="color:#E6DB74;">/bin/pre-plugin-remove&quot;</span></span>
<span class="line"></span></code></pre></div>`,168),Ce={id:"extension-commands-for-asdf-cli",tabindex:"-1"},$e=e("a",{class:"header-anchor",href:"#extension-commands-for-asdf-cli","aria-hidden":"true"},"#",-1),Re=n(`<p>It&#39;s possible for plugins to define new asdf commands by providing <code>lib/commands/command*.bash</code> scripts or executables that will be callable using the asdf command line interface by using the plugin name as a subcommand.</p><p>For example, suppose a <code>foo</code> plugin has:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">foo/</span></span>
<span class="line"><span style="color:#F8F8F2;">  lib/commands/</span></span>
<span class="line"><span style="color:#F8F8F2;">    command.bash</span></span>
<span class="line"><span style="color:#F8F8F2;">    command-bat.bash</span></span>
<span class="line"><span style="color:#F8F8F2;">    command-bat-man.bash</span></span>
<span class="line"><span style="color:#F8F8F2;">    command-help.bash</span></span>
<span class="line"></span></code></pre></div><p>Users can now execute:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">$ asdf foo         </span><span style="color:#88846F;"># same as running \`$ASDF_DATA_DIR/plugins/foo/lib/commands/command.bash\`</span></span>
<span class="line"><span style="color:#F8F8F2;">$ asdf foo bar     </span><span style="color:#88846F;"># same as running \`$ASDF_DATA_DIR/plugins/foo/lib/commands/command.bash bar\`</span></span>
<span class="line"><span style="color:#F8F8F2;">$ asdf foo </span><span style="color:#66D9EF;">help</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># same as running \`$ASDF_DATA_DIR/plugins/foo/lib/commands/command-help.bash\`</span></span>
<span class="line"><span style="color:#F8F8F2;">$ asdf foo bat man </span><span style="color:#88846F;"># same as running \`$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bat-man.bash\`</span></span>
<span class="line"><span style="color:#F8F8F2;">$ asdf foo bat baz </span><span style="color:#88846F;"># same as running \`$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bat.bash baz\`</span></span>
<span class="line"></span></code></pre></div><p>Plugin authors can use this feature to provide utilities related to their tools, or even create plugins that are just new command extensions of asdf itself.</p><p>If the executable bit is set, the script is executed, replacing the asdf execution.</p><p>If the executable bit is not set, asdf will source the scripts as Bash scripts.</p><p><code>$ASDF_CMD_FILE</code> resolves to the full path of the file being sourced.</p>`,9),Ve={href:"https://github.com/asdf-community/asdf-haxe",target:"_blank",rel:"noopener noreferrer"},He=e("code",null,"haxe",-1),Ye=e("code",null,"asdf haxe neko-dylibs-link",-1),Ge=e("p",null,"Be sure to list your asdf Extension Commands in your plugins README.",-1),Ue={id:"custom-shim-templates",tabindex:"-1"},je=e("a",{class:"header-anchor",href:"#custom-shim-templates","aria-hidden":"true"},"#",-1),We=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"WARNING"),e("p",null,[s("Please only use if "),e("strong",null,"absolutely"),s(" required")])],-1),ze=e("p",null,[s("asdf allows custom shim templates. For an executable called "),e("code",null,"foo"),s(", if there's a "),e("code",null,"shims/foo"),s(" file in the plugin, then asdf will copy that file instead of using its standard shim template.")],-1),Me=e("p",null,[e("strong",null,"This must be used wisely.")],-1),Ke={href:"https://github.com/asdf-vm/asdf-elixir",target:"_blank",rel:"noopener noreferrer"},Je=n(`<h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h2><p><code>asdf</code> contains the <code>plugin-test</code> command to test your plugin:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf plugin </span><span style="color:#66D9EF;">test</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">plugin_name</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">plugin_url</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> [--asdf-tool-version </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">version</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">] [--asdf-plugin-gitref </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">git_ref</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">] [test_command...]</span></span>
<span class="line"></span></code></pre></div><ul><li><code>&lt;plugin_name&gt;</code> &amp; <code>&lt;plugin_url&gt;</code> are required</li><li>If optional <code>[--asdf-tool-version &lt;version&gt;]</code> is specified, the tool will be installed with that specific version. Defaults to <code>asdf latest &lt;plugin-name&gt;</code></li><li>If optional <code>[--asdf-plugin-gitref &lt;git_ref&gt;]</code> is specified, the plugin itself is checked out at that commit/branch/tag. This is useful for testing a pull-request on your plugin&#39;s CI.</li><li>Optional parameter <code>[test_command...]</code> is the command to execute to validate the installed tool works correctly. Typically <code>&lt;tool&gt; --version</code> or <code>&lt;tool&gt; --help</code>. For example, to test the NodeJS plugin, we could run<div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># asdf plugin test &lt;plugin_name&gt;  &lt;plugin_url&gt;                               [test_command]</span></span>
<span class="line"><span style="color:#F8F8F2;">  asdf plugin </span><span style="color:#66D9EF;">test</span><span style="color:#F8F8F2;"> nodejs         https://github.com/asdf-vm/asdf-nodejs.git node --version</span></span>
<span class="line"></span></code></pre></div></li></ul><div class="custom-container tip"><p class="custom-container-title">Note</p><p>We recommend testing in both Linux &amp; macOS CI environments</p></div><h3 id="github-action" tabindex="-1"><a class="header-anchor" href="#github-action" aria-hidden="true">#</a> GitHub Action</h3>`,6),Qe={href:"https://github.com/asdf-vm/actions",target:"_blank",rel:"noopener noreferrer"},Xe=e("code",null,".github/workflows/test.yaml",-1),Ze=n(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">name</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">Test</span></span>
<span class="line"><span style="color:#AE81FF;">on</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">push</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">branches</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      - </span><span style="color:#E6DB74;">main</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">pull_request</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">jobs</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">plugin_test</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">name</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">asdf plugin test</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">strategy</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">matrix</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">os</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">          - </span><span style="color:#E6DB74;">ubuntu-latest</span></span>
<span class="line"><span style="color:#F8F8F2;">          - </span><span style="color:#E6DB74;">macos-latest</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">runs-on</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">\${{ matrix.os }}</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">steps</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      - </span><span style="color:#F92672;">name</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">asdf_plugin_test</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">uses</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">asdf-vm/actions/plugin-test@v2</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">with</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">command</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;&lt;MY_TOOL&gt; --version&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="travisci-config" tabindex="-1"><a class="header-anchor" href="#travisci-config" aria-hidden="true">#</a> TravisCI Config</h3><p>A sample <code>.travis.yml</code> file, customize it to your needs</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F92672;">language</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">c</span></span>
<span class="line"><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">asdf plugin test &lt;MY_TOOL&gt; $TRAVIS_BUILD_DIR &#39;&lt;MY_TOOL&gt; --version&#39;</span></span>
<span class="line"><span style="color:#F92672;">before_script</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">  - </span><span style="color:#E6DB74;">git clone https://github.com/asdf-vm/asdf.git asdf</span></span>
<span class="line"><span style="color:#F8F8F2;">  - </span><span style="color:#E6DB74;">. asdf/asdf.sh</span></span>
<span class="line"><span style="color:#F92672;">os</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">  - </span><span style="color:#E6DB74;">linux</span></span>
<span class="line"><span style="color:#F8F8F2;">  - </span><span style="color:#E6DB74;">osx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>When using another CI you may need to pass a relative path to the plugin location:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf plugin </span><span style="color:#66D9EF;">test</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">tool_name</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">path</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&lt;tool_command&gt; --version&#39;</span></span>
<span class="line"></span></code></pre></div></div><h2 id="api-rate-limiting" tabindex="-1"><a class="header-anchor" href="#api-rate-limiting" aria-hidden="true">#</a> API Rate Limiting</h2><p>If a command depends on accessing an external API, like <code>bin/list-all</code> or <code>bin/latest-stable</code>, it may experience rate limiting during automated testing. To mitigate this, ensure there is a code-path which provides an authentication token via an environment variable. For example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">cmd=</span><span style="color:#E6DB74;">&quot;curl --silent&quot;</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> [ </span><span style="color:#F92672;">-n</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$GITHUB_API_TOKEN</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> ]</span><span style="color:#F92672;">;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">then</span></span>
<span class="line"><span style="color:#F8F8F2;"> cmd=</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$cmd</span><span style="color:#E6DB74;"> -H &#39;Authorization: token </span><span style="color:#F8F8F2;">$GITHUB_API_TOKEN</span><span style="color:#E6DB74;">&#39;&quot;</span></span>
<span class="line"><span style="color:#F92672;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">cmd=</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$cmd</span><span style="color:#E6DB74;"> </span><span style="color:#F8F8F2;">$releases_path</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="github-api-token" tabindex="-1"><a class="header-anchor" href="#github-api-token" aria-hidden="true">#</a> <code>GITHUB_API_TOKEN</code></h3>`,9),es=e("code",null,"GITHUB_API_TOKEN",-1),ss={href:"https://github.com/settings/tokens/new",target:"_blank",rel:"noopener noreferrer"},ts=e("code",null,"public_repo",-1),ls=n(`<p>Then add this to your CI pipeline environment variables.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>NEVER publish your authentication tokens in your code repository</p></div><h2 id="plugin-shortname-index" tabindex="-1"><a class="header-anchor" href="#plugin-shortname-index" aria-hidden="true">#</a> Plugin Shortname Index</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The recommended installation method for a plugin is via direct URL installation:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># asdf plugin add &lt;name&gt; &lt;git_url&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs</span></span>
<span class="line"></span></code></pre></div></div>`,4),ns=e("code",null,"git_url",-1),os={href:"https://github.com/asdf-vm/asdf-plugins",target:"_blank",rel:"noopener noreferrer"},as=e("code",null,"git_url",-1),is={href:"https://github.com/asdf-vm/asdf-plugins",target:"_blank",rel:"noopener noreferrer"};function rs(cs,ps){const l=a("ExternalLinkIcon"),o=a("Badge");return c(),p("div",null,[h,u,g,m,e("ol",null,[e("li",null,[s("use the "),e("a",f,[s("asdf-vm/asdf-plugin-template"),t(l)]),s(" repository to "),e("a",b,[s("generate"),t(l)]),s(" a plugin repo (named "),F,s(") with default scripts implemented. Once generated, clone the repo and run the "),_,s(" script to interactively update the template.")]),v]),y,e("ul",null,[x,A,e("li",null,[s("avoid non-portable tools or command flags. For example, "),D,s(". See our asdf core "),e("a",S,[s("list of banned commands"),t(l)])])]),T,E,e("table",null,[L,e("tbody",null,[e("tr",null,[e("td",I,[w,s(),t(o,{type:"tip",text:"required",vertical:"middle"})]),k]),e("tr",null,[e("td",N,[q,s(),t(o,{type:"tip",text:"required",vertical:"middle"})]),P]),e("tr",null,[e("td",O,[B,s(),t(o,{type:"tip",text:"required",vertical:"middle"})]),C]),e("tr",null,[e("td",$,[R,s(),t(o,{type:"warning",text:"recommended",vertical:"middle"})]),V]),H,Y,G,U,j,W,z,M,K,J,Q,X,Z])]),ee,e("h3",se,[te,s(),le,s(),t(o,{type:"tip",text:"required",vertical:"middle"})]),ne,e("ul",null,[e("li",null,[e("a",oe,[s("using the Git sort capability"),t(l)]),s(" (requires Git >= "),ae,s(")")]),e("li",null,[e("a",ie,[s("writing a custom sort method"),t(l)]),s(" (requires "),re,s(", "),ce,s(" & "),pe,s(")")])]),de,e("h3",he,[ue,s(),ge,s(),t(o,{type:"tip",text:"required",vertical:"middle"})]),me,e("h3",fe,[be,s(),Fe,s(),t(o,{type:"tip",text:"required",vertical:"middle"})]),_e,e("h3",ve,[ye,s(),xe,s(),t(o,{type:"warning",text:"recommended",vertical:"middle"})]),Ae,De,Se,e("ul",null,[Te,Ee,e("li",null,[s("A filter query is provided as the first argument to the script. This should be used to filter the output by version number or tool provider. "),e("ul",null,[e("li",null,[s("For instance, the output of "),Le,s(" from the "),e("a",Ie,[s("ruby plugin"),t(l)]),s(" lists versions of Ruby from many providers: "),we,s(", "),ke,s(" & "),Ne,s(" amongst others. The user provided filter could be used by the plugin to filter the semver versions and/or provider."),qe])])]),Pe,Oe]),Be,i(" TODO: document command hooks "),i(" ## Command Hooks "),e("h2",Ce,[$e,s(" Extension Commands for asdf CLI "),t(o,{type:"danger",text:"advanced",vertical:"middle"})]),Re,e("p",null,[e("a",Ve,[He,t(l)]),s(" is a great example of a plugin which uses this feature. It provides the "),Ye,s(" to fix an issue where Haxe executables expect to find dynamic libraries relative to the executable directory.")]),Ge,e("h2",Ue,[je,s(" Custom Shim Templates "),t(o,{type:"danger",text:"advanced",vertical:"middle"})]),We,ze,Me,e("p",null,[s("As far as the asdf core team is aware, this feature is only in use in the first-party "),e("a",Ke,[s("Elixir plugin"),t(l)]),s(". This is because an executable is also read as an Elixir file in addition to being an executable. This makes it not possible to use the standard Bash shim.")]),Je,e("p",null,[s("The "),e("a",Qe,[s("asdf-vm/actions"),t(l)]),s(" repo provides a GitHub Action for testing your plugins hosted on GitHub. A sample "),Xe,s(" Actions Workflow:")]),Ze,e("p",null,[s("To utilise the "),es,s(", create a "),e("a",ss,[s("new personal token"),t(l)]),s(" with only "),ts,s(" access.")]),ls,e("p",null,[s("If the "),ns,s(" is not provided, asdf will use the "),e("a",os,[s("Shortname Index repository"),t(l)]),s(" to determine the exact "),as,s(" to use.")]),e("p",null,[s("You can add your plugin to the "),e("a",is,[s("Shortname Index"),t(l)]),s(" by following the instructions in that repo.")])])}const hs=r(d,[["render",rs],["__file","create.html.vue"]]);export{hs as default};
